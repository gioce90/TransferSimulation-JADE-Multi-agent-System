public class VehicleTableModel extends AbstractTableModel {
	
	private ArrayList<Vehicle> vehicles ;
	private COLUMNS[] header;
	
	// possible column names:
	public enum COLUMNS {
		IMAGE_COLUMN,
		TARGA_COLUMN,
		CAR_TYPE_COLUMN,
		MARCA_COLUMN,
		STATE_COLUMN,
		PTT_COLUMN,
	};
	
	///////////////////////////////////////////////////////
	// Constructor:
	
	public VehicleTableModel(COLUMNS[] headerTable) {
		this.vehicles = new ArrayList<Vehicle>();
		this.header = headerTable;
	}
	
	
	///////////////////////////////////////////////////////
	// obligatory override methods (from AbstractTableModel):
	
	@Override
	public int getColumnCount() {
		return header.length;
	}

	@Override
	public int getRowCount() {
		return vehicles.size();
	}
	
	@Override
	public Object getValueAt(int row, int col) {
		Object value = "?";
        Vehicle v = vehicles.get(row);
        if (v!=null) {
        	COLUMNS column = header[col];
	        switch (column) {
	            case IMAGE_COLUMN:
	                value = VehicleUtils.findImageByColumnCarType(v.getType());
	                break;
	            case TARGA_COLUMN:
	                value = v.getPlate();
	                break;
	            case CAR_TYPE_COLUMN:
	                value = VehicleUtils.findStringByColumnCarType(v.getType());
	                break;
	            // other cases... bla bla...
	        }
        }
        return value;
	}
	
	
	
	///////////////////////////////////////////////////////
	// My methods:
	
	public void addRow(Vehicle vehicle) {
		vehicles.add(vehicle);
		fireTableRowsInserted(0, getRowCount()); // is right?
	}
	
	/*public boolean removeRow(Vehicle vehicle) {
		boolean flag = vehicles.remove(vehicle);
		fireTableRowsDeleted(0, getRowCount()); // is right?
		return flag;
	}*/
	
	public void removeRow(int row) {
		vehicles.remove(row);
		fireTableRowsDeleted(row, row); // is right?
	}
	
	public Vehicle getVehicleAt(int row) {
        return vehicles.get(row);
    }
	
	public int indexOf(Vehicle v){
		return vehicles.indexOf(v);
	}
	
	// found the corresponding column index
	public int findColumn(COLUMNS columnName) {
		for (int i=0; i<getColumnCount(); i++)
			if (columnName.equals(header[i])) 
		        return i;
		return -1;
	}

	
	// a value in that column exist in the table?
	private boolean controllIfExist(Object value, int col) {
		boolean bool = false;
		for (int i=0; i<getRowCount();i++){
			if (value.equals(getValueAt(i, col))){
				bool=true;
				break;
			}
		}
		return bool;
	}
	
	public int getColumnIndex(COLUMNS column){
		for(int i=0;i<header.length;i++){
			if (column.equals(header[i])){
				return i;
			}
		}
		return -1;
	}
	
	
	
	///////////////////////////////////////////////////////
	// other methods (from AbstractTableModel) to override:
	
	
    @Override
	public Class<?> getColumnClass(int col) {
    	Class<?> c;
    	COLUMNS column = header[col];
    	if (column.equals(COLUMNS.IMAGE_COLUMN))
    		c = ImageIcon.class;
    	else if (column.equals(COLUMNS.STATE_COLUMN))
    		c =  JComboBox.class;
    	else c = super.getColumnClass(col);
    	return c;
    }
    
    
    @Override
    public String getColumnName(int col) {
    	COLUMNS column = header[col];
    	if (column.equals(COLUMNS.IMAGE_COLUMN))
    		return " ";
    	else if (column.equals(COLUMNS.TARGA_COLUMN))
    		return "Targa";
    	// others... bla bla...
    	return super.getColumnName(col);
    };
	
    
	@Override
	public boolean isCellEditable(int row, int col) {
		return true;
	}
	
	
    @Override
    public void setValueAt(Object value, int row, int col) {
    	Vehicle v = vehicles.get(row);
    	boolean flag = false;
    	if (v!=null) {
        	COLUMNS column = header[col];
	        switch (column) {
	            case TARGA_COLUMN:
	            	if (!v.getPlate().equals(value)){
	            		if (!controllIfExist(value, col)){  // mhm...
	            			v.setPlate((String) value);
	            			flag = true;
	            		}
	            	}
	            	break;
	            case MARCA_COLUMN:
	            	if (!v.getMark().equals(value)){
	            		v.setMark((String) value);
	            		flag = true;
	            	}
	            	break;
	            
				// others ... bla bla...
	        }
	        // update ONLY if necessary:
	        if (flag) fireTableRowsUpdated(row, row); // is right?
        }
    }
    
    
}
